---
openapi: 3.0.0
info:
  title: Tastify
  description: A music taste analysis and comparison tool
  contact:
    name: Ryan
    email: hello@ryancarr.ca
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.0
servers:
- url: https://virtserver.swaggerhub.com/ryandougc/Tastify/1.1.0
  description: SwaggerHub API Auto Mocking
paths:
  /login:
    get:
      summary: login a user
      description: |-
        Call GET on this route to receive a URI for logging in to Spotify. By re-directing to that URI, the user will be able to login in with Spotify and authorize this application.
        After the front-end redirects the user to the URI and the user signs in to Spotify and authorizes the app, they will automatically be redirected back to this application. The backend will handle them first, receiving an access token and refresh token from the Spotify API. It will also get a the user's profileID. It returns the user to the front-end with the accessToken, refreshToken and profileId.
      operationId: login
      responses:
        "200":
          description: login URI received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
              example:
                loginSpotifyApiUri: https://accounts.spotify.com/authorize?response_type=code&client_id=af7c1fe6-d669-414e-b066-e9733f0de7a8&scope=user-library-read%20user-top-read&redirect_uri=https://api.ca/callback&state=08c71152-c552-42e7-b094-f510ff44e9cb
        "5XX":
          description: unexpected error
  /refresh:
    get:
      summary: refresh a user's access token
      description: "Using the refresh token provided when a user logs in, a new access token can be retrieved from the Spotify API without the need for the user to log in again. A new access token will be returned."
      operationId: refresh
      parameters:
      - name: refreshToken
        in: query
        description: Numeric ID of the user to get
        required: true
        style: form
        explode: true
        schema:
          type: string
        example: dGhpcyBpcyBhIHJhbmRvbSByZWZyZXNoIHRva2Vu
      responses:
        "200":
          description: authorization token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
              example:
                accessToken: d2VsbCBoZXJlIGlzIGFub3RoZXIgcmFuZG9tIHJlZnJlc2ggdG9rZW4=
        "5XX":
          description: unexpected error
  /user:
    post:
      summary: creates a new user profile
      description: "By passing in a user's Spotify username in the JSON body, a new profile is created and saved to the database. A new profile will be instantiated with the provided unique spotify username, a unique generated profileId, a date that their profile was created, and and empty object as a placeholder for their muic analysis before it is generated."
      operationId: createUser
      requestBody:
        description: Receives a JSON object containing the user's Spotify username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_body'
            example:
              spotifyUsername: fakeUsername
        required: true
      responses:
        "201":
          description: user created
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "409":
          description: profile already exists
        "5XX":
          description: unexpected error
  /user/{profileId}:
    get:
      summary: searches and retrieves a specific user's profile
      description: "By passing the profileId of the user you want data for in the path parameter, you can retrieve the corresponding profile object for that user. This will return an object containing the user's spotifyUsername, unique profileId, the date their profile was created, and an object containing their music analysis (an empty array if the analysis has not yet been generated)."
      operationId: getUser
      parameters:
      - name: profileId
        in: path
        description: The unique profileID to specify which user's profile you want to interact with
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      responses:
        "200":
          description: user profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
              examples:
                profileWithNoAnalysis:
                  $ref: '#/components/examples/exampleOfProfileWithNoAnalysis'
                profileWithAnalysis:
                  $ref: '#/components/examples/exampleOfProfileWithAnalysis'
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
    put:
      summary: updates the specified user's profile
      description: "By passing the profileId of a specific user in the path parameter and a Profile object as JSON in the body, you can update/save the user's profile with the current data."
      operationId: updateUser
      parameters:
      - name: profileId
        in: path
        description: The unique profileID to specify which user's profile you want to interact with
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      requestBody:
        description: user profile object to update the database with
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
            examples:
              updateProfileWithNoAnalysis:
                $ref: '#/components/examples/exampleOfProfileWithNoAnalysis'
              updateProfileWithAnalysis:
                $ref: '#/components/examples/exampleOfProfileWithAnalysis'
        required: true
      responses:
        "200":
          description: user updated
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
    delete:
      summary: deletes a user's profile
      description: "By passing a user's profileId as the path parameter, you can delete the specified profile from the database."
      operationId: deleteUser
      parameters:
      - name: profileId
        in: path
        description: The unique profileID to specify which user's profile you want to interact with
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      responses:
        "200":
          description: user deleted
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
  /user/{profileId}/analysis:
    get:
      summary: generate a music taste analysis for a user
      description: "By passing a user's profileId in the path parameter, you can either retrieve the corresponding saved music analysis or, if the profile doesn't have an analysis yet, a muic analysis will be generated, saved to the database, and returned back."
      operationId: generateAnalysis
      parameters:
      - name: profileId
        in: path
        description: The unique profileID to specify which user's profile you want to interact with
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      responses:
        "200":
          description: user music taste analysis
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Analysis'
              examples:
                analysis:
                  $ref: '#/components/examples/exampleOfAnalysis'
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
  /user/{profileId}/top50:
    get:
      summary: get a user's top 50 tracks and top 50 artists
      description: "By passing a user's profileId in the path parameter, you can retrieve an object with two array properties, one containing the user's top 50 listened to tracks and the other containing the user's top 50 listened to artists."
      operationId: getTop50
      parameters:
      - name: profileId
        in: path
        description: The unique profileID to specify which user's profile you want to interact with
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      responses:
        "200":
          description: An object with the user's top 50 listened to tracks and artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Top50'
              examples:
                top50:
                  $ref: '#/components/examples/exampleOfTop50'
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
  /user/{profileId}/friends:
    get:
      summary: get a list of a user's friends
      description: |
        By passing a user's profileId in the path parameter, you can retrieve an array with all of the corresponding user's friends. \
        Note: The friends list response that we receive will return two users to represent the freindship. The user1 property will always be less than user2 (user1 < user2). This is automatically taken care of and should not be of concern to the user of this API, however it is good to keep in mind.
      operationId: getUserFriends
      parameters:
      - name: profileId
        in: path
        description: The unique profileID to specify which user's profile you want to interact with
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      responses:
        "200":
          description: Array with a user's friends
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
              examples:
                userHasNoFriends:
                  summary: User has no friends
                  value: []
                userHasFriends:
                  $ref: '#/components/examples/exampleOfUsersFriendlist'
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
  /comparison:
    post:
      summary: creates a new friendship
      description: "By passing in two profileIds in the JSON body, a friendship (or comparison as we call it in the API) is created to link the two users. This will allow the users access to see each other's music analysis."
      operationId: createComparison
      requestBody:
        description: Friendship object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comparison_body'
            example:
              user1: 67e90ece-cece-471c-bdda-b7bc18e45856
              user2: 9aed7798-0930-46c0-85b9-16cc4494d5ef
      responses:
        "201":
          description: comparison created
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "409":
          description: users are already friends
        "5XX":
          description: unexpected error
  /comparison/{user1}.{user2}:
    get:
      summary: searches and retrieves a friendship between two users
      description: "By passing two user's profileIds as path parameters separated by a \".\", you can retrieve the user's analysis data from both of their profiles. If they are not friends, a 404 error will be returned."
      operationId: searchComparisons
      parameters:
      - name: user1
        in: path
        description: profileId of user1 in the friendship
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      - name: user2
        in: path
        description: profileId of user2 in the friendship
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 9aed7798-0930-46c0-85b9-16cc4494d5ef
      responses:
        "200":
          description: array containing both user's profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
              examples:
                fullFriendshipData:
                  $ref: '#/components/examples/exampleOfRetrievingFriendship'
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
    delete:
      summary: deletes the specified friendship
      description: "By passing two user's profileIds as path parameters separated by a \".\", you can delete the corresponding friendship."
      operationId: deleteComparison
      parameters:
      - name: user1
        in: path
        description: profileId of user1 in the friendship
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 67e90ece-cece-471c-bdda-b7bc18e45856
      - name: user2
        in: path
        description: profileId of user2 in the friendship
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 9aed7798-0930-46c0-85b9-16cc4494d5ef
      responses:
        "200":
          description: comparison deleted
        "400":
          description: bad request
        "401":
          description: unauthorized action
        "404":
          description: the specified resource was not found
        "5XX":
          description: unexpected error
components:
  schemas:
    Profile:
      required:
      - profileId
      - spotifyUsername
      type: object
      properties:
        profileId:
          type: integer
          format: int64
        spotifyUsername:
          type: string
        dateCreated:
          type: string
        analysis:
          $ref: '#/components/schemas/Analysis'
    Analysis:
      type: object
      properties:
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
      description: A user's profile
    Artist:
      type: object
      properties:
        genres:
          type: array
          items:
            type: string
        href:
          type: string
        id:
          type: string
        name:
          type: string
        popularity:
          type: integer
          format: int64
    ArtistEntry:
      type: object
      properties:
        artist:
          $ref: '#/components/schemas/Artist'
        trackCount:
          type: integer
          format: int64
      description: "The ArtistEntry object holds an Artist object, and has a corresponding count for the number of tracks from that artist the user has added to a playlist"
    Track:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        href:
          type: string
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum:
          - track
      description: A Track object holds the details and identifiers for a track
    TrackEntry:
      type: object
      properties:
        track:
          $ref: '#/components/schemas/Track'
        count:
          type: integer
          format: int64
      description: The TrackEntry object holds a Track object and has a corresponding count property for the number of times that user has added that track to a playlist
    Genre:
      type: object
      properties:
        name:
          type: string
        trackCount:
          type: integer
          format: int64
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/TrackEntry'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistEntry'
      description: A genre object holds the data for one of the genres that a user listens to. It holds information on how many songs a user listens to in that genre and specifies which songs and artists fall under that genre
    Top50:
      type: object
      properties:
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
    Comparison:
      type: object
      properties:
        user1:
          type: string
        user2:
          type: string
        dateCreated:
          type: string
      description: "Two users connected by a friendship. User1 property must be < User2 property. Together, user1 and user2 are a composite key."
    inline_response_200:
      type: object
      properties:
        loginSpotifyApiUri:
          type: string
          description: The re-direct link to send a user to the Spotify API login page
    inline_response_200_1:
      type: object
      properties:
        accessToken:
          type: string
          description: A newly generated access token
    user_body:
      required:
      - spotifyUsername
      type: object
      properties:
        spotifyUsername:
          type: string
    comparison_body:
      required:
      - user1
      - user2
      type: object
      properties:
        user1:
          type: string
        user2:
          type: string
  responses:
    badInput:
      description: bad input parameter
    badRequest:
      description: bad request
    unauthorized:
      description: unauthorized action
    notFound:
      description: the specified resource was not found
    serverError:
      description: unexpected error
  parameters:
    profileIdParam:
      name: profileId
      in: path
      description: The unique profileID to specify which user's profile you want to interact with
      required: true
      style: simple
      explode: false
      schema:
        type: string
        example: 67e90ece-cece-471c-bdda-b7bc18e45856
  examples:
    exampleOfProfileWithNoAnalysis:
      summary: A user's profile that has just been created and doesn't have an analysis yet
      value:
        profileId: 67e90ece-cece-471c-bdda-b7bc18e45856
        spotifyUsername: JayZ
        dateCreated: "1679713086246"
        analysis:
          genres: []
    exampleOfProfileWithAnalysis:
      summary: A profile that has an analysis generated and saved to it
      value:
        profileId: 67e90ece-cece-471c-bdda-b7bc18e45856
        spotifyUsername: JayZ
        dateCreated: "1679713086246"
        analysis:
          genres:
          - name: Country
            count: 3
            tracks:
            - artists:
              - name: Luke Combs
                id: 718COspgdWOnwOFpJHRZHS
              href: https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx
              id: 7aEtlGHoiPAfRB084NiDmx
              name: Beer Never Broke My Heart
              type: track
            - artists:
              - name: Chris Stapleton
                id: 4YLtscXsxbVgi031ovDDdh
              href: https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7
              id: 3fqwjXwUGN6vbzIwvyFMhx
              name: Tennessee Whiskey
              type: track
            - artists:
              - name: Luke Combs
                id: 718COspgdWOnwOFpJHRZHS
              href: https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l
              id: 1mMLMZYXkMueg65jRRWG1l
              name: When It Rains It Pours
              type: track
            artists:
            - genres:
              - Contemporary Country
              - Country
              href: https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS
              id: 718COspgdWOnwOFpJHRZHS
              name: Luke Combs
              popularity: 85
            - genres:
              - Contemporary Country
              - Outlaw Country
              href: https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh
              id: 4YLtscXsxbVgi031ovDDdh
              name: Chris Stapleton
              popularity: 81
    exampleOfAnalysis:
      summary: A user's music taste analysis
      value:
        genres:
        - name: Country
          count: 3
          tracks:
          - artists:
            - name: Luke Combs
              id: 718COspgdWOnwOFpJHRZHS
            href: https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx
            id: 7aEtlGHoiPAfRB084NiDmx
            name: Beer Never Broke My Heart
            type: track
          - artists:
            - name: Chris Stapleton
              id: 4YLtscXsxbVgi031ovDDdh
            href: https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7
            id: 3fqwjXwUGN6vbzIwvyFMhx
            name: Tennessee Whiskey
            type: track
          - artists:
            - name: Luke Combs
              id: 718COspgdWOnwOFpJHRZHS
            href: https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l
            id: 1mMLMZYXkMueg65jRRWG1l
            name: When It Rains It Pours
            type: track
          artists:
          - genres:
            - Contemporary Country
            - Country
            href: https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS
            id: 718COspgdWOnwOFpJHRZHS
            name: Luke Combs
            popularity: 85
          - genres:
            - Contemporary Country
            - Outlaw Country
            href: https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh
            id: 4YLtscXsxbVgi031ovDDdh
            name: Chris Stapleton
            popularity: 81
    exampleOfTop50:
      summary: Top 50 listened to tracks and artists
      value:
        tracks:
        - artists:
          - name: Luke Combs
            id: 718COspgdWOnwOFpJHRZHS
          href: https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx
          id: 7aEtlGHoiPAfRB084NiDmx
          name: Beer Never Broke My Heart
          type: track
        - artists:
          - name: Chris Stapleton
            id: 4YLtscXsxbVgi031ovDDdh
          href: https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7
          id: 3fqwjXwUGN6vbzIwvyFMhx
          name: Tennessee Whiskey
          type: track
        - artists:
          - name: Luke Combs
            id: 718COspgdWOnwOFpJHRZHS
          href: https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l
          id: 1mMLMZYXkMueg65jRRWG1l
          name: When It Rains It Pours
          type: track
        artists:
        - genres:
          - Contemporary Country
          - Country
          href: https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS
          id: 718COspgdWOnwOFpJHRZHS
          name: Luke Combs
          popularity: 85
        - genres:
          - Contemporary Country
          - Outlaw Country
          href: https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh
          id: 4YLtscXsxbVgi031ovDDdh
          name: Chris Stapleton
          popularity: 81
    exampleOfUsersFriendlist:
      summary: A user's list of friends
      value:
      - user1: 67e90ece-cece-471c-bdda-b7bc18e45856
        user2: 9aed7798-0930-46c0-85b9-16cc4494d5ef
        dateCreated: "1680114709213"
      - user1: a9f12104-13d0-426b-90b9-579d9c0b0444
        user2: 67e90ece-cece-471c-bdda-b7bc18e45856
        dateCreated: "1680114709213"
      - user1: 67e90ece-cece-471c-bdda-b7bc18e45856
        user2: c209fb9e-80d5-45d9-a02e-e6c68dd16c93
        dateCreated: "1680114709213"
    exampleOfFriendship:
      summary: A friendship holds both users ids and a date the friendship was created
      value:
        user1: 67e90ece-cece-471c-bdda-b7bc18e45856
        user2: 9aed7798-0930-46c0-85b9-16cc4494d5ef
        dateCreated: "1680114709213"
    exampleOfRetrievingFriendship:
      summary: Comparison of two user's music analysis
      value:
        user1:
          profileId: 67e90ece-cece-471c-bdda-b7bc18e45856
          spotifyUsername: JayZ
          dateCreated: "1679713086246"
          analysis:
            tracks:
            - artists:
              - name: Luke Combs
                id: 718COspgdWOnwOFpJHRZHS
              href: https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx
              id: 7aEtlGHoiPAfRB084NiDmx
              name: Beer Never Broke My Heart
              type: track
            - artists:
              - name: Chris Stapleton
                id: 4YLtscXsxbVgi031ovDDdh
              href: https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7
              id: 3fqwjXwUGN6vbzIwvyFMhx
              name: Tennessee Whiskey
              type: track
            - artists:
              - name: Luke Combs
                id: 718COspgdWOnwOFpJHRZHS
              href: https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l
              id: 1mMLMZYXkMueg65jRRWG1l
              name: When It Rains It Pours
              type: track
            artists:
            - genres:
              - Contemporary Country
              - Country
              href: https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS
              id: 718COspgdWOnwOFpJHRZHS
              name: Luke Combs
              popularity: 85
            - genres:
              - Contemporary Country
              - Outlaw Country
              href: https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh
              id: 4YLtscXsxbVgi031ovDDdh
              name: Chris Stapleton
              popularity: 81
        user2:
          profileId: 9aed7798-0930-46c0-85b9-16cc4494d5ef
          spotifyUsername: Elton John
          dateCreated: "1680120548741"
          analysis:
            tracks:
            - artists:
              - Phoebe Bridgers
              href: https://api.spotify.com/v1/tracks/1WCjhRs2WBgyeGaybCX2Po
              id: 1WCjhRs2WBgyeGaybCX2Po
              name: Graceland Too
              type: track
            - artists:
              - Bon Iver
              href: https://api.spotify.com/v1/tracks/7rIhp6EWLNtM8qFIQruJPT
              id: 7rIhp6EWLNtM8qFIQruJPT
              name: Wash.
              type: track
            artists:
            - genres:
              - indie pop
              - la indie
              href: https://api.spotify.com/v1/artists/1r1uxoy19fzMxunt3ONAkG
              id: 1r1uxoy19fzMxunt3ONAkG
              name: Phoebe Bridgers
              popularity: 79
            - genres:
              - eau claire indie
              - indie folk
              - melancholia
              href: https://api.spotify.com/v1/artists/4LEiUm1SRbFMgfqnQTwUbQ
              id: 4LEiUm1SRbFMgfqnQTwUbQ
              name: Bon Iver
              popularity: 76
        dateCreated: "1680114709213"
