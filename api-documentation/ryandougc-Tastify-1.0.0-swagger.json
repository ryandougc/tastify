{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/ryandougc/Tastify/1.0.0"
  } ],
  "info" : {
    "description" : "A music taste analysis and comparison tool",
    "version" : "1.0.0",
    "title" : "Tastify",
    "contact" : {
      "name" : "Ryan",
      "email" : "hello@ryancarr.ca"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths" : {
    "/user" : {
      "post" : {
        "summary" : "creates a new user profile",
        "operationId" : "createUser",
        "description" : "By passing in a user's Spotify username in the JSON body, a new profile is created and saved to the database. A new profile will be instantiated with the provided unique spotify username, a unique generated profileId, a date that their profile was created, and and empty object as a placeholder for their muic analysis before it is generated.",
        "responses" : {
          "201" : {
            "description" : "user created"
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "409" : {
            "description" : "profile already exists"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        },
        "requestBody" : {
          "required" : true,
          "description" : "Receives a JSON object containing the user's Spotify username",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "spotifyUsername" ],
                "properties" : {
                  "spotifyUsername" : {
                    "type" : "string"
                  }
                }
              },
              "example" : {
                "spotifyUsername" : "fakeUsername"
              }
            }
          }
        }
      }
    },
    "/user/{profileId}" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/profileIdParam"
      } ],
      "get" : {
        "summary" : "searches and retrieves a specific user's profile",
        "operationId" : "getUser",
        "description" : "By passing the profileId of the user you want data for in the path parameter, you can retrieve the corresponding profile object for that user. This will return an object containing the user's spotifyUsername, unique profileId, the date their profile was created, and an object containing their music analysis (an empty array if the analysis has not yet been generated).",
        "responses" : {
          "200" : {
            "description" : "user profile",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "items" : {
                    "$ref" : "#/components/schemas/Profile"
                  }
                },
                "examples" : {
                  "profileWithNoAnalysis" : {
                    "$ref" : "#/components/examples/exampleOfProfileWithNoAnalysis"
                  },
                  "profileWithAnalysis" : {
                    "$ref" : "#/components/examples/exampleOfProfileWithAnalysis"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        }
      },
      "put" : {
        "summary" : "updates the specified user's profile",
        "operationId" : "updateUser",
        "description" : "By passing the profileId of a specific user in the path parameter and a Profile object as JSON in the body, you can update/save the user's profile with the current data.",
        "responses" : {
          "200" : {
            "description" : "user updated"
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        },
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Profile"
              },
              "examples" : {
                "updateProfileWithNoAnalysis" : {
                  "$ref" : "#/components/examples/exampleOfProfileWithNoAnalysis"
                },
                "updateProfileWithAnalysis" : {
                  "$ref" : "#/components/examples/exampleOfProfileWithAnalysis"
                }
              }
            }
          },
          "description" : "user profile object to update the database with"
        }
      },
      "delete" : {
        "summary" : "deletes a user's profile",
        "operationId" : "deleteUser",
        "description" : "By passing a user's profileId as the path parameter, you can delete the specified profile from the database.",
        "responses" : {
          "200" : {
            "description" : "user deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        }
      }
    },
    "/user/{profileId}/analysis" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/profileIdParam"
      } ],
      "get" : {
        "summary" : "generate a music taste analysis for a user",
        "operationId" : "generateAnalysis",
        "description" : "By passing a user's profileId in the path parameter, you can either retrieve the corresponding saved music analysis or, if the profile doesn't have an analysis yet, a muic analysis will be generated, saved to the database, and returned back.",
        "responses" : {
          "200" : {
            "description" : "user music taste analysis",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "items" : {
                    "$ref" : "#/components/schemas/Analysis"
                  }
                },
                "examples" : {
                  "analysis" : {
                    "$ref" : "#/components/examples/exampleOfAnalysis"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        }
      }
    },
    "/user/{profileId}/top50" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/profileIdParam"
      } ],
      "get" : {
        "summary" : "get a user's top 50 tracks and top 50 artists",
        "operationId" : "getTop50",
        "description" : "By passing a user's profileId in the path parameter, you can retrieve an object with two array properties, one containing the user's top 50 listened to tracks and the other containing the user's top 50 listened to artists.",
        "responses" : {
          "200" : {
            "description" : "An object with the user's top 50 listened to tracks and artists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "items" : {
                    "$ref" : "#/components/schemas/Top50"
                  }
                },
                "examples" : {
                  "top50" : {
                    "$ref" : "#/components/examples/exampleOfTop50"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        }
      }
    },
    "/user/{profileId}/friends" : {
      "parameters" : [ {
        "$ref" : "#/components/parameters/profileIdParam"
      } ],
      "get" : {
        "summary" : "get a list of a user's friends",
        "operationId" : "getUserFriends",
        "description" : "By passing a user's profileId in the path parameter, you can retrieve an array with all of the corresponding user's friends. \\\nNote: The friends list response that we receive will return two users to represent the freindship. The user1 property will always be less than user2 (user1 < user2). This is automatically taken care of and should not be of concern to the user of this API, however it is good to keep in mind.\n",
        "responses" : {
          "200" : {
            "description" : "Array with a user's friends",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Profile"
                  }
                },
                "examples" : {
                  "userHasNoFriends" : {
                    "value" : [ ],
                    "summary" : "User has no friends"
                  },
                  "userHasFriends" : {
                    "$ref" : "#/components/examples/exampleOfUsersFriendlist"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        }
      }
    },
    "/comparison" : {
      "post" : {
        "summary" : "creates a new friendship",
        "operationId" : "createComparison",
        "description" : "By passing in two profileIds in the JSON body, a friendship (or comparison as we call it in the API) is created to link the two users. This will allow the users access to see each other's music analysis.",
        "responses" : {
          "201" : {
            "description" : "comparison created"
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "409" : {
            "description" : "users are already friends"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "required" : [ "user1", "user2" ],
                "properties" : {
                  "user1" : {
                    "type" : "string"
                  },
                  "user2" : {
                    "type" : "string"
                  }
                }
              },
              "example" : {
                "user1" : "67e90ece-cece-471c-bdda-b7bc18e45856",
                "user2" : "9aed7798-0930-46c0-85b9-16cc4494d5ef"
              }
            }
          },
          "description" : "Friendship object"
        }
      }
    },
    "/comparison/{user1}.{user2}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "user1",
        "required" : true,
        "description" : "profileId of user1 in the friendship",
        "schema" : {
          "type" : "string",
          "example" : "67e90ece-cece-471c-bdda-b7bc18e45856"
        }
      }, {
        "in" : "path",
        "name" : "user2",
        "required" : true,
        "description" : "profileId of user2 in the friendship",
        "schema" : {
          "type" : "string",
          "example" : "9aed7798-0930-46c0-85b9-16cc4494d5ef"
        }
      } ],
      "get" : {
        "summary" : "searches and retrieves a friendship between two users",
        "operationId" : "searchComparisons",
        "description" : "By passing two user's profileIds as path parameters separated by a \".\", you can retrieve the user's analysis data from both of their profiles. If they are not friends, a 404 error will be returned.",
        "responses" : {
          "200" : {
            "description" : "array containing both user's profiles",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Profile"
                  }
                },
                "examples" : {
                  "fullFriendshipData" : {
                    "$ref" : "#/components/examples/exampleOfRetrievingFriendship"
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        }
      },
      "delete" : {
        "summary" : "deletes the specified friendship",
        "operationId" : "deleteComparison",
        "description" : "By passing two user's profileIds as path parameters separated by a \".\", you can delete the corresponding friendship.",
        "responses" : {
          "200" : {
            "description" : "comparison deleted"
          },
          "400" : {
            "$ref" : "#/components/responses/badRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/unauthorized"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          },
          "5XX" : {
            "$ref" : "#/components/responses/serverError"
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "profileIdParam" : {
        "in" : "path",
        "name" : "profileId",
        "required" : true,
        "schema" : {
          "type" : "string",
          "example" : "67e90ece-cece-471c-bdda-b7bc18e45856"
        },
        "description" : "The unique profileID to specify which user's profile you want to interact with"
      }
    },
    "schemas" : {
      "Profile" : {
        "type" : "object",
        "required" : [ "profileId", "spotifyUsername" ],
        "properties" : {
          "profileId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "spotifyUsername" : {
            "type" : "string"
          },
          "dateCreated" : {
            "type" : "string"
          },
          "analysis" : {
            "$ref" : "#/components/schemas/Analysis"
          }
        }
      },
      "Analysis" : {
        "type" : "object",
        "properties" : {
          "genres" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Genre"
            }
          }
        },
        "description" : "A user's profile"
      },
      "Artist" : {
        "type" : "object",
        "properties" : {
          "genres" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "href" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "popularity" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "ArtistEntry" : {
        "type" : "object",
        "properties" : {
          "artist" : {
            "$ref" : "#/components/schemas/Artist"
          },
          "trackCount" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "description" : "The ArtistEntry object holds an Artist object, and has a corresponding count for the number of tracks from that artist the user has added to a playlist"
      },
      "Track" : {
        "type" : "object",
        "properties" : {
          "artists" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Artist"
            }
          },
          "href" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "track" ]
          }
        },
        "description" : "A Track object holds the details and identifiers for a track"
      },
      "TrackEntry" : {
        "type" : "object",
        "properties" : {
          "track" : {
            "$ref" : "#/components/schemas/Track"
          },
          "count" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "description" : "The TrackEntry object holds a Track object and has a corresponding count property for the number of times that user has added that track to a playlist"
      },
      "Genre" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "trackCount" : {
            "type" : "integer",
            "format" : "int64"
          },
          "tracks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TrackEntry"
            }
          },
          "artists" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ArtistEntry"
            }
          }
        },
        "description" : "A genre object holds the data for one of the genres that a user listens to. It holds information on how many songs a user listens to in that genre and specifies which songs and artists fall under that genre"
      },
      "Top50" : {
        "type" : "object",
        "properties" : {
          "tracks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Track"
            }
          },
          "artists" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Artist"
            }
          }
        }
      },
      "Comparison" : {
        "type" : "object",
        "properties" : {
          "user1" : {
            "type" : "string"
          },
          "user2" : {
            "type" : "string"
          },
          "dateCreated" : {
            "type" : "string"
          }
        },
        "description" : "Two users connected by a friendship. User1 property must be < User2 property. Together, user1 and user2 are a composite key."
      }
    },
    "examples" : {
      "exampleOfProfileWithNoAnalysis" : {
        "value" : {
          "profileId" : "67e90ece-cece-471c-bdda-b7bc18e45856",
          "spotifyUsername" : "JayZ",
          "dateCreated" : "1679713086246",
          "analysis" : {
            "genres" : [ ]
          }
        },
        "summary" : "A user's profile that has just been created and doesn't have an analysis yet"
      },
      "exampleOfProfileWithAnalysis" : {
        "value" : {
          "profileId" : "67e90ece-cece-471c-bdda-b7bc18e45856",
          "spotifyUsername" : "JayZ",
          "dateCreated" : "1679713086246",
          "analysis" : {
            "genres" : [ {
              "name" : "Country",
              "count" : 3,
              "tracks" : [ {
                "artists" : [ {
                  "name" : "Luke Combs",
                  "id" : "718COspgdWOnwOFpJHRZHS"
                } ],
                "href" : "https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx",
                "id" : "7aEtlGHoiPAfRB084NiDmx",
                "name" : "Beer Never Broke My Heart",
                "type" : "track"
              }, {
                "artists" : [ {
                  "name" : "Chris Stapleton",
                  "id" : "4YLtscXsxbVgi031ovDDdh"
                } ],
                "href" : "https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7",
                "id" : "3fqwjXwUGN6vbzIwvyFMhx",
                "name" : "Tennessee Whiskey",
                "type" : "track"
              }, {
                "artists" : [ {
                  "name" : "Luke Combs",
                  "id" : "718COspgdWOnwOFpJHRZHS"
                } ],
                "href" : "https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l",
                "id" : "1mMLMZYXkMueg65jRRWG1l",
                "name" : "When It Rains It Pours",
                "type" : "track"
              } ],
              "artists" : [ {
                "genres" : [ "Contemporary Country", "Country" ],
                "href" : "https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS",
                "id" : "718COspgdWOnwOFpJHRZHS",
                "name" : "Luke Combs",
                "popularity" : 85
              }, {
                "genres" : [ "Contemporary Country", "Outlaw Country" ],
                "href" : "https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh",
                "id" : "4YLtscXsxbVgi031ovDDdh",
                "name" : "Chris Stapleton",
                "popularity" : 81
              } ]
            } ]
          }
        },
        "summary" : "A profile that has an analysis generated and saved to it"
      },
      "exampleOfAnalysis" : {
        "value" : {
          "genres" : [ {
            "name" : "Country",
            "count" : 3,
            "tracks" : [ {
              "artists" : [ {
                "name" : "Luke Combs",
                "id" : "718COspgdWOnwOFpJHRZHS"
              } ],
              "href" : "https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx",
              "id" : "7aEtlGHoiPAfRB084NiDmx",
              "name" : "Beer Never Broke My Heart",
              "type" : "track"
            }, {
              "artists" : [ {
                "name" : "Chris Stapleton",
                "id" : "4YLtscXsxbVgi031ovDDdh"
              } ],
              "href" : "https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7",
              "id" : "3fqwjXwUGN6vbzIwvyFMhx",
              "name" : "Tennessee Whiskey",
              "type" : "track"
            }, {
              "artists" : [ {
                "name" : "Luke Combs",
                "id" : "718COspgdWOnwOFpJHRZHS"
              } ],
              "href" : "https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l",
              "id" : "1mMLMZYXkMueg65jRRWG1l",
              "name" : "When It Rains It Pours",
              "type" : "track"
            } ],
            "artists" : [ {
              "genres" : [ "Contemporary Country", "Country" ],
              "href" : "https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS",
              "id" : "718COspgdWOnwOFpJHRZHS",
              "name" : "Luke Combs",
              "popularity" : 85
            }, {
              "genres" : [ "Contemporary Country", "Outlaw Country" ],
              "href" : "https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh",
              "id" : "4YLtscXsxbVgi031ovDDdh",
              "name" : "Chris Stapleton",
              "popularity" : 81
            } ]
          } ]
        },
        "summary" : "A user's music taste analysis"
      },
      "exampleOfTop50" : {
        "value" : {
          "tracks" : [ {
            "artists" : [ {
              "name" : "Luke Combs",
              "id" : "718COspgdWOnwOFpJHRZHS"
            } ],
            "href" : "https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx",
            "id" : "7aEtlGHoiPAfRB084NiDmx",
            "name" : "Beer Never Broke My Heart",
            "type" : "track"
          }, {
            "artists" : [ {
              "name" : "Chris Stapleton",
              "id" : "4YLtscXsxbVgi031ovDDdh"
            } ],
            "href" : "https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7",
            "id" : "3fqwjXwUGN6vbzIwvyFMhx",
            "name" : "Tennessee Whiskey",
            "type" : "track"
          }, {
            "artists" : [ {
              "name" : "Luke Combs",
              "id" : "718COspgdWOnwOFpJHRZHS"
            } ],
            "href" : "https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l",
            "id" : "1mMLMZYXkMueg65jRRWG1l",
            "name" : "When It Rains It Pours",
            "type" : "track"
          } ],
          "artists" : [ {
            "genres" : [ "Contemporary Country", "Country" ],
            "href" : "https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS",
            "id" : "718COspgdWOnwOFpJHRZHS",
            "name" : "Luke Combs",
            "popularity" : 85
          }, {
            "genres" : [ "Contemporary Country", "Outlaw Country" ],
            "href" : "https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh",
            "id" : "4YLtscXsxbVgi031ovDDdh",
            "name" : "Chris Stapleton",
            "popularity" : 81
          } ]
        },
        "summary" : "Top 50 listened to tracks and artists"
      },
      "exampleOfUsersFriendlist" : {
        "value" : [ {
          "user1" : "67e90ece-cece-471c-bdda-b7bc18e45856",
          "user2" : "9aed7798-0930-46c0-85b9-16cc4494d5ef",
          "dateCreated" : "1680114709213"
        }, {
          "user1" : "a9f12104-13d0-426b-90b9-579d9c0b0444",
          "user2" : "67e90ece-cece-471c-bdda-b7bc18e45856",
          "dateCreated" : "1680114709213"
        }, {
          "user1" : "67e90ece-cece-471c-bdda-b7bc18e45856",
          "user2" : "c209fb9e-80d5-45d9-a02e-e6c68dd16c93",
          "dateCreated" : "1680114709213"
        } ],
        "summary" : "A user's list of friends"
      },
      "exampleOfFriendship" : {
        "value" : {
          "user1" : "67e90ece-cece-471c-bdda-b7bc18e45856",
          "user2" : "9aed7798-0930-46c0-85b9-16cc4494d5ef",
          "dateCreated" : "1680114709213"
        },
        "summary" : "A friendship holds both users ids and a date the friendship was created"
      },
      "exampleOfRetrievingFriendship" : {
        "value" : {
          "user1" : {
            "profileId" : "67e90ece-cece-471c-bdda-b7bc18e45856",
            "spotifyUsername" : "JayZ",
            "dateCreated" : "1679713086246",
            "analysis" : {
              "tracks" : [ {
                "artists" : [ {
                  "name" : "Luke Combs",
                  "id" : "718COspgdWOnwOFpJHRZHS"
                } ],
                "href" : "https://api.spotify.com/v1/tracks/7aEtlGHoiPAfRB084NiDmx",
                "id" : "7aEtlGHoiPAfRB084NiDmx",
                "name" : "Beer Never Broke My Heart",
                "type" : "track"
              }, {
                "artists" : [ {
                  "name" : "Chris Stapleton",
                  "id" : "4YLtscXsxbVgi031ovDDdh"
                } ],
                "href" : "https://api.spotify.com/v1/albums/7lxHnls3yQNl8B9bILmHj7",
                "id" : "3fqwjXwUGN6vbzIwvyFMhx",
                "name" : "Tennessee Whiskey",
                "type" : "track"
              }, {
                "artists" : [ {
                  "name" : "Luke Combs",
                  "id" : "718COspgdWOnwOFpJHRZHS"
                } ],
                "href" : "https://api.spotify.com/v1/tracks/1mMLMZYXkMueg65jRRWG1l",
                "id" : "1mMLMZYXkMueg65jRRWG1l",
                "name" : "When It Rains It Pours",
                "type" : "track"
              } ],
              "artists" : [ {
                "genres" : [ "Contemporary Country", "Country" ],
                "href" : "https://api.spotify.com/v1/artists/718COspgdWOnwOFpJHRZHS",
                "id" : "718COspgdWOnwOFpJHRZHS",
                "name" : "Luke Combs",
                "popularity" : 85
              }, {
                "genres" : [ "Contemporary Country", "Outlaw Country" ],
                "href" : "https://api.spotify.com/v1/artists/4YLtscXsxbVgi031ovDDdh",
                "id" : "4YLtscXsxbVgi031ovDDdh",
                "name" : "Chris Stapleton",
                "popularity" : 81
              } ]
            }
          },
          "user2" : {
            "profileId" : "9aed7798-0930-46c0-85b9-16cc4494d5ef",
            "spotifyUsername" : "Elton John",
            "dateCreated" : "1680120548741",
            "analysis" : {
              "tracks" : [ {
                "artists" : [ "Phoebe Bridgers" ],
                "href" : "https://api.spotify.com/v1/tracks/1WCjhRs2WBgyeGaybCX2Po",
                "id" : "1WCjhRs2WBgyeGaybCX2Po",
                "name" : "Graceland Too",
                "type" : "track"
              }, {
                "artists" : [ "Bon Iver" ],
                "href" : "https://api.spotify.com/v1/tracks/7rIhp6EWLNtM8qFIQruJPT",
                "id" : "7rIhp6EWLNtM8qFIQruJPT",
                "name" : "Wash.",
                "type" : "track"
              } ],
              "artists" : [ {
                "genres" : [ "indie pop", "la indie" ],
                "href" : "https://api.spotify.com/v1/artists/1r1uxoy19fzMxunt3ONAkG",
                "id" : "1r1uxoy19fzMxunt3ONAkG",
                "name" : "Phoebe Bridgers",
                "popularity" : 79
              }, {
                "genres" : [ "eau claire indie", "indie folk", "melancholia" ],
                "href" : "https://api.spotify.com/v1/artists/4LEiUm1SRbFMgfqnQTwUbQ",
                "id" : "4LEiUm1SRbFMgfqnQTwUbQ",
                "name" : "Bon Iver",
                "popularity" : 76
              } ]
            }
          },
          "dateCreated" : "1680114709213"
        },
        "summary" : "Comparison of two user's music analysis"
      }
    },
    "responses" : {
      "badInput" : {
        "description" : "bad input parameter"
      },
      "badRequest" : {
        "description" : "bad request"
      },
      "unauthorized" : {
        "description" : "unauthorized action"
      },
      "notFound" : {
        "description" : "the specified resource was not found"
      },
      "serverError" : {
        "description" : "unexpected error"
      }
    }
  }
}